<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Control colors and brushes -->
    <Color x:Key="WindowBackground">#FF0991C3</Color>
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{StaticResource WindowBackground}"/>

    <Color x:Key="TextblockCurrentSongForeground">#FFA2D2FB</Color>
    <SolidColorBrush x:Key="TextblockCurrentSongForegroundBrush" Color="{StaticResource TextblockCurrentSongForeground}"/>

    <Color x:Key="ToolBarTrayBackground">LightBlue</Color>
    <SolidColorBrush x:Key="ToolBarTrayBackgroundBrush" Color="{StaticResource ToolBarTrayBackground}"/>
    
    <Color x:Key="SliderBackground">#FF8BCADE</Color>
    <SolidColorBrush x:Key="SliderBackgroundBrush"  Color="{StaticResource SliderBackground}"/>
    
    <Color x:Key="LabelForeground">DarkBlue</Color>
    <SolidColorBrush x:Key="LabelForegroundBrush" Color="{StaticResource LabelForeground}"/>

    <Color x:Key="Border">Blue</Color>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource Border}"/>
    
    <Color x:Key="TabcontrolBackground">#FF8BCADE</Color>
    <SolidColorBrush x:Key="TabcontrolBackgroundBrush" Color="{StaticResource TabcontrolBackground}"/>

    <Color x:Key="TabitemForeground">LightYellow</Color>
    <SolidColorBrush x:Key="TabitemForegroundForegroundBrush" Color="{StaticResource TabitemForeground}"/>

    <Color x:Key="TabitemBackground">#FF0F52BA</Color>
    <SolidColorBrush x:Key="TabitemBackgroundBrush" Color="{StaticResource TabitemBackground}"/>

    <Color x:Key="ExpanderForeground">DarkBlue</Color>
    <SolidColorBrush x:Key="ExpanderForegroundBrush" Color="{StaticResource ExpanderForeground}"/>

    <Color x:Key="ListboxBackground">#FFC4F7F7</Color>
    <SolidColorBrush x:Key="ListboxBackgroundBrush" Color="{StaticResource ListboxBackground}"/>

    <Color x:Key="ListboxForeground">DarkBlue</Color>
    <SolidColorBrush x:Key="ListboxForegroundBrush" Color="{StaticResource ListboxForeground}"/>

    <Color x:Key="ListboxItemSelectedForeground">#FFd7edf4</Color>
    <SolidColorBrush x:Key="ListboxItemSelectedForegroundBrush" Color="{StaticResource ListboxItemSelectedForeground}"/>

    <Color x:Key="ButtonBackground">#FF002db3</Color>
    <SolidColorBrush x:Key="ButtonBackgroundBrush" Color="{StaticResource ButtonBackground}"/>

    <Color x:Key="ButtonSelected">#FF0F52BA</Color>
    <SolidColorBrush x:Key="ButtonSelectedBrush" Color="{StaticResource ButtonSelected}"/>

    <Color x:Key="AlternatingRowBackground">#FFB9DFF7</Color>
    <SolidColorBrush x:Key="AlternatingRowBackgroundBrush" Color="{StaticResource AlternatingRowBackground}"/>

    <Color x:Key="RowBackground">#FFD2EAF7</Color>   
    <SolidColorBrush x:Key="RowBackgroundBrush" Color="{StaticResource RowBackground}"/>

    <Color x:Key="DataGridRow">DarkBlue</Color>
    <SolidColorBrush x:Key="DataGridRowBrush" Color="{StaticResource DataGridRow}"/>

    <Color x:Key="DataGridRowSelected">#FF0F52BA</Color>
    <SolidColorBrush x:Key="DataGridRowSelectedBrush" Color="{StaticResource DataGridRowSelected}"/>

    <Color x:Key="DatagridHeaderBackground1">#FF0991C3</Color>
    <SolidColorBrush x:Key="DatagridHeaderBackground1Brush" Color="{StaticResource DatagridHeaderBackground1}"/>

    <Color x:Key="DatagridHeaderBackground2">Blue</Color>
    <SolidColorBrush x:Key="DatagridHeaderBackground2Brush" Color="{StaticResource DatagridHeaderBackground2}"/>

    <Color x:Key="DatagridHeaderBackground3">#FF0991C3</Color>
    <SolidColorBrush x:Key="DatagridHeaderBackground3Brush" Color="{StaticResource DatagridHeaderBackground3}"/>

    <Color x:Key="DataGridColumnHeaderForecolor">#FFd7edf4</Color>
    <SolidColorBrush x:Key="DataGridColumnHeaderForecolorBrush" Color="{StaticResource DataGridColumnHeaderForecolor}"/>

    <Color x:Key="LogoBackground">Blue</Color>
    <SolidColorBrush x:Key="LogoBackgroundBrush" Color="{StaticResource LogoBackground}"/>

    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="ContextmenuBackground">LightBlue</Color>
    <Color x:Key="ContextmenuForeground">Blue</Color>
    <SolidColorBrush x:Key="ContextmenuBackgroundBrush" Color="{StaticResource ContextmenuBackground}"/>
    <SolidColorBrush x:Key="ContextmenuForegroundBrush" Color="{StaticResource ContextmenuForeground}"/>

    <!-- Hintergrund für MainWindow -->
    <Style TargetType="Window" x:Key="DynamicWindowBrush">
        <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
    </Style>
    <!--Style for Exit Button-->
    <Style x:Key="exitButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="ToolTip" Value="Close"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="#FF7474E8"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="0,10,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="#FF7474E8" BorderThickness="2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Style for Max Button-->
    <Style x:Key="maxButton" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="#FF7474E8"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="ToolTip" Value="Close"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="0,10,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="#FF7474E8" BorderThickness="2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Blue"/>
                <Setter Property="Background" Value="Red"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="toggleButton" TargetType="ToggleButton">
        <Grid>
            <Ellipse x:Name="ellipse" Fill="WhiteSmoke" StrokeThickness="4" Stroke="Blue"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke" TargetName="ellipse" Value="#FF39A8F5"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Fill" TargetName="ellipse" Value="LightBlue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="rundButton" TargetType="Button">
        <Grid>
            <Ellipse x:Name="backgroundElement" Fill="WhiteSmoke" StrokeThickness="4" Stroke="Blue"/>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke" TargetName="backgroundElement" Value="#FF39A8F5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- Hintergrund für Center von Inputbox -->
    <LinearGradientBrush x:Key="CenterBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FF0991C3"/>
        <GradientStop Offset="0.5" Color="DarkGray"/>
        <GradientStop Offset="1" Color="DarkGray"/>
    </LinearGradientBrush>
    <!-- Hintergrund for Bottom of the Inputbox -->
    <LinearGradientBrush x:Key="BottomBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="DarkGray"/>
        <GradientStop Offset="0.5" Color="#FF5F5B5B"/>
        <GradientStop Offset="1" Color="DarkGray"/>
    </LinearGradientBrush>

    <!-- Designg Button Style ( used in InputBox) -->
    <Style x:Key="DesignButton" TargetType="Button">
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Background" Value="#FF0F52BA"/>
        <Setter Property="Foreground" Value="Beige"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" CornerRadius="5"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FF18DEFD"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Hintergrund für Header von MainWindow -->
    <LinearGradientBrush x:Key="HeaderBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="Blue"/>
        <GradientStop Offset="0.3" Color="Blue"/>
        <GradientStop Offset="1" Color="#FF0991C3"/>
    </LinearGradientBrush>
    <!--Menu Background-->
    <LinearGradientBrush x:Key="menuBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FF0991C3"/>
        <GradientStop Offset="0.5" Color="Blue"/>
        <GradientStop Offset="1" Color="#FF0991C3"/>
    </LinearGradientBrush>
    <!-- Style für das Menü und die MenuItems -->
    <Style TargetType="Menu">
        <Setter Property="Background" Value="{StaticResource menuBackground}"/>
        <Setter Property="Height" Value="30"/>
    </Style>

    <!--DataTemplate für Speaker ImageTougleButton-->
    <DataTemplate x:Key="touggleButtonIsChecked">
        <Image Source="Images/SpeakerOn.png"/>
    </DataTemplate>
    <DataTemplate x:Key="touggleButtonIsNotChecked">
        <Image Source="/Images/SpeakerOff.png"/>
    </DataTemplate>
    
    <!-- Speaker Image Button -->
    <Style x:Key="simpleImageTouggleButton" TargetType="ToggleButton">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="ContentTemplate" Value="{StaticResource touggleButtonIsChecked}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource touggleButtonIsNotChecked}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Standart TabItem Style  -->
    <Style TargetType="TabItem">
        <Setter Property="Foreground" Value="{StaticResource TabitemForegroundForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="Border" BorderThickness="2" BorderBrush="{StaticResource BorderBrush}" CornerRadius="8,8,8,8" Margin="2" >
                        <ContentPresenter x:Name="ContentSite"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            ContentSource="Header"
                                            Margin="10,2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Border" Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="WhiteSmoke"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource TabitemBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Style für das Listbox -->
    <Style TargetType="ListBox">
        <Setter Property="Background" Value="{StaticResource ListboxBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ListboxForegroundBrush}"/>
    </Style>
    
    <!-- Style für die ListboxItems -->
    <Style TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="_Border"
                                Padding="2"
                                SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="_Border" Property="Background" Value="{StaticResource ResourceKey=ButtonSelectedBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource ListboxItemSelectedForegroundBrush}"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Style für die DataGridColumnHeaderBackground -->
    <LinearGradientBrush x:Key="DatagridHeaderBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="{StaticResource DatagridHeaderBackground1}"/>
        <GradientStop Offset="0.8" Color="{StaticResource DatagridHeaderBackground2}"/>
        <GradientStop Offset="1" Color="{StaticResource DatagridHeaderBackground3}"/>
    </LinearGradientBrush>
    <!-- Style für die DataGridColumnHeader -->
    <Style TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{StaticResource DatagridHeaderBackground}" />
        <Setter Property="Foreground" Value="{StaticResource DataGridColumnHeaderForecolorBrush}" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <!-- Style für die DataGridRow -->
    <Style TargetType="DataGridRow">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Foreground" Value="{StaticResource DataGridRowBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource DataGridRowSelectedBrush}"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
            </Style.Triggers>
    </Style>
    <!-- Style für das DataGrid -->
    <Style TargetType="DataGrid">
        <Setter Property="AlternationCount" Value="1"/>
        <Setter Property="RowBackground" Value="{StaticResource RowBackgroundBrush}"/>
        <Setter Property="AlternatingRowBackground" Value="{StaticResource AlternatingRowBackgroundBrush}"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    <!-- Style für die Statusbar -->
    <Style x:Key="StatusbarGrid" TargetType="{x:Type Grid}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FF0991C3"/>
                    <GradientStop Offset="0.4" Color="#FF0991C3"/>
                    <GradientStop Offset="1" Color="#FF0955C3"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="StatusBar">
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="AntiqueWhite"/>
    </Style>

    <!--Style for ContextMenu-->
    <Style TargetType="ContextMenu">
        <Setter Property="Background" Value="{StaticResource ContextmenuBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ContextmenuForegroundBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border x:Name="Border" Background="{StaticResource ContextmenuBackgroundBrush}" BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{StaticResource BorderMediumColor}" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Style for MenuItem -->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property = "Background" Value="{DynamicResource ContextmenuBackgroundBrush}"/>
        <Setter Property = "Foreground" Value="{DynamicResource ContextmenuForegroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="MenuItem.IsMouseOver" Value="true">
                <!--<Setter Property = "FontSize" Value="16"/>-->
                <Setter Property = "FontWeight" Value="Bold"/>
                <Setter Property = "Foreground" Value="Blue"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Style for Textbox with Palceholder-->
    <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <TextBox Text="{Binding Path=Text,
                                                RelativeSource={RelativeSource TemplatedParent}, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
                                 x:Name="textSource" 
                                 Background="Transparent" 
                                 Panel.ZIndex="2" />
                        <TextBox Text="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Panel.ZIndex="1">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="Foreground" Value="Transparent"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="Foreground" Value="Gray"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>